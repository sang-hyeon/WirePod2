SETUP OF THIS FILE:{
This file is structed as following:
This file contains context from the folder chipper and the following folders:

/wire-pod/chipper/pkg/wirepod/plugins

Since this code base is quiet large i will make multiple files for you to understand the context better this is part 6

I will first give you the path to the file, then i will give you either the full file code or  just the snippets if they take too much space, if its a snippet i will place "SNIPPET" after the path, if there is no "SNIPPET" you can assume its the full file code
For some files i will add some comments to descirbe them if the other files look the same to save space and memory this will be indicated with "EXTRA CONTEXT" at the end of the code from that file 
}


/wire-pod/chipper/plugins/sdkTest/sdkTest.go

package main

import (
	"context"
	"log"

	"github.com/fforchino/vector-go-sdk/pkg/vector"
	"github.com/fforchino/vector-go-sdk/pkg/vectorpb"
	"github.com/kercre123/wire-pod/chipper/pkg/logger"
)

// test of SDK implementation

var Utterances = []string{"hello world"}
var Name = "SDK Plugin Test"

func behave(ctx context.Context, robot *vector.Vector, start chan bool, stop chan bool) {
	controlRequest := &vectorpb.BehaviorControlRequest{
		RequestType: &vectorpb.BehaviorControlRequest_ControlRequest{
			ControlRequest: &vectorpb.ControlRequest{
				Priority: vectorpb.ControlRequest_OVERRIDE_BEHAVIORS,
			},
		},
	}
	go func() {

		go func() {
			// * begin - modified from official vector-go-sdk
			r, err := robot.Conn.BehaviorControl(
				ctx,
			)
			if err != nil {
				log.Println(err)
				return
			}

			if err := r.Send(controlRequest); err != nil {
				log.Println(err)
				return
			}

			for {
				ctrlresp, err := r.Recv()
				if err != nil {
					log.Println(err)
					return
				}
				if ctrlresp.GetControlGrantedResponse() != nil {
					start <- true
					break
				}
			}

			for {
				select {
				case <-stop:
					logger.Println("KGSim: releasing behavior control (interrupt)")
					if err := r.Send(
						&vectorpb.BehaviorControlRequest{
							RequestType: &vectorpb.BehaviorControlRequest_ControlRelease{
								ControlRelease: &vectorpb.ControlRelease{},
							},
						},
					); err != nil {
						log.Println(err)
						return
					}
					return
				default:
					continue
				}
			}
			// * end - modified from official vector-go-sdk
		}()
	}()
}

func Action(transcribedText string, botSerial string, guid string, target string) (string, string) {
	logger.Println("hello world plugin test")
	phrase := "hello world"
	robot, err := vector.New(
		vector.WithSerialNo(botSerial),
		vector.WithTarget(target),
		vector.WithToken(guid),
	)
	if err != nil {
		logger.Println(err)
		return "intent_imperative_praise", ""
	}
	ctx := context.Background()
	start := make(chan bool)
	stop := make(chan bool)
	go func() {
		behave(ctx, robot, start, stop)
	}()

	for {
		select {
		case <-start:
			robot.Conn.SayText(
				ctx,
				&vectorpb.SayTextRequest{
					Text:           phrase,
					UseVectorVoice: true,
					DurationScalar: 1,
				},
			)
			stop <- true
			return "intent_imperative_praise", ""
		}
	}
}



/wire-pod/chipper/plugins/whatdate/whatdate.go
package main

import (
	"strconv"
	"strings"
	"time"
)

var Utterances = []string{"what day is it", "date today", "date", "what days it"}
var Name = "Correct Date"

func stripOutTriggerWords(s string) string {
	result := strings.Replace(s, "simon says", "", 1)
	result = strings.Replace(result, "repeat", "", 1)
	return result
}

func CountWords(s string) int {
	return len(strings.Fields(s))
}

//Example go plugin that give back the correct date

func Action(transcribedText string, botSerial string, guid string, target string) (string, string) {
	year, month, day := time.Now().Date()
	yearSring := strconv.FormatInt(int64(year), 10)

	VECTOR_PHRASE := "The date is " + month.String() + " " + strconv.FormatInt(int64(day), 10) + ", " + yearSring + " "

	return "intent_imperative_praise", VECTOR_PHRASE
}

/wire-pod/vector-cloud
EXTRA CONTEXT:
This was the readme for the Vector cloud it has a lot of files but im not sure if we need to modify anything in there 

# Vector-cloud

Programs that make Vector talk to the cloud!

## Building

To make it easy to cross-compile binaries on your computer that will
run on Vector you'll first need the armbuilder docker image.  It can
be generated by running..

```
# make docker-builder
```

To build vic-cloud, run...
```
# make vic-cloud
```

To build vic-gateway, run...
```
# make vic-gateway
```

## Example Customization

Let's have Vector refuse to give users information on Area 51 and then
explictly state that all other information requests have been approved.

First we make the following changes to `internal/voice/stream/context.go`

```diff
diff --git a/internal/voice/stream/context.go b/internal/voice/stream/context.go
index 1d5df2c..564b22f 100644
--- a/internal/voice/stream/context.go
+++ b/internal/voice/stream/context.go
@@ -1,7 +1,9 @@
 package stream
 
 import (
-       "bytes"
+       "regexp"
+       
+       "bytes"
        "context"
        "encoding/json"
        "fmt"
@@ -155,6 +157,14 @@ func sendIntentResponse(resp *chipper.IntentResult, receiver Receiver) {
 
 func sendKGResponse(resp *chipper.KnowledgeGraphResponse, receiver Receiver) {
        var buf bytes.Buffer
+
+       found, _ := regexp.MatchString("area fifty one", resp.QueryText)
+       if found {
+         resp.SpokenText = "Information regarding Area Fifty One is classified. The Illuminati High Council has been notified of this request."
+       } else {
+         resp.SpokenText = "Information Request Approved. " + resp.SpokenText
+       }
+
        params := map[string]string{
                "answer":      resp.SpokenText,
                "answer_type": resp.CommandType,
```

Next compile, copy to Vector, and reboot.

```bash
grant@lord-humungus vector-cloud % make vic-cloud                        
echo `go version` && cd /Users/grant/src/vector-cloud && go mod download
  ... BUILD LOG OUTPUT ...
Packed 1 file.
grant@lh % ssh root@<VECTOR_IP> mount -o remount,rw /
grant@lh % scp build/vic-cloud root@<VECTOR_IP>:/anki/bin
vic-cloud                                              100% 4800KB   3.6MB/s   00:01    
grant@lh %                                                 
grant@lh % ssh root@<VECTOR_IP> /sbin/reboot            
```

And test after the reboot by saying "Hey Vector... Question... What is Area 51?" and
"Hey Vector... Question... What is DogeCoin?"

